procedure GrabAllStonesOfColor_(color) { AuxGrab_StonesOfColor_(aux_numStones(color),color) }

procedure AdvanceSnakeHeadTo_(dir) {
  AuxExtendTheBodyTo(dir)
  if (aux_canMove(dir))  { AuxMove(dir)                   } else { BOOM("The snake falls outside the board") }
  if (not(auxIsSnake())) { AuxDrawSnakeHeadLookingTo(dir) } else { BOOM("The snake crashed against itself")  }
}

function directionofLastMovement()   { return (opuesto(auxDirectionOfNextSegment())) }

procedure AuxGrab_StonesOfColor_(n,color) { repeat(n) { AuxGrab(color) } }
procedure AuxDrop_StonesOfColor_(n,color) { repeat(n) { AuxDrop(color) } }

function auxIsSnake() { return (aux_hasStones(aux_Black()) || aux_hasStones(aux_Green())) }

procedure AuxExtendTheBodyTo(dir)        { AuxCodeTheSegment(dir,aux_Black())          }
procedure AuxDrawSnakeHeadLookingTo(dir) { AuxCodeTheSegment(opuesto(dir),aux_Green()) }

procedure AuxCodeTheSegment(dirToCode, color) {
  if (aux_hasStones(color)) { BOOM("Segment cannot be coded, because there is one already in this cell") }
  else {
    if (dirToCode == aux_North()) { AuxDrop_StonesOfColor_(1, color) }
    if (dirToCode == aux_East())  { AuxDrop_StonesOfColor_(2, color) }
    if (dirToCode == aux_South()) { AuxDrop_StonesOfColor_(3, color) }
    if (dirToCode == aux_West())  { AuxDrop_StonesOfColor_(4, color) }
  }
}

function auxDirectionOfNextSegment() { return (auxDirectionCodedWith(aux_Green()))   }

function auxDirectionCodedWith(color) {
  if      (aux_numStones(color) == 1) { dir := aux_North() }
   elseif (aux_numStones(color) == 2) { dir := aux_East()  }
   elseif (aux_numStones(color) == 3) { dir := aux_South() } 
   else                               { dir := aux_West()  }
  return (dir)
}
