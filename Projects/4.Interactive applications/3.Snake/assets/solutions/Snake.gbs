interactive program {
  K_LEFT       -> { MoveTheSnakeTo(Oeste)                     }
  K_RIGHT      -> { MoveTheSnakeTo(Este)                      }
  K_UP         -> { MoveTheSnakeTo(Norte)                     }
  K_DOWN       -> { MoveTheSnakeTo(Sur)                       }
  TIMEOUT(500) -> { MoveTheSnakeTo(directionofLastMovement()) }
}

procedure MoveTheSnakeTo(direction) {
  AdvanceSnakeHeadTo_(direction)
  if (hasApple()) { EatTheApple() } 
   else { AdvanceSnakeTail() }
}

procedure AdvanceSnakeTail() {
  GoFromSnakeHeadToSnakeTail()
  AdvanceTail()
  GoFromSnakeTailToSnakeHead()
}

procedure GoFromSnakeHeadToSnakeTail() {
  while (not (hasSnakeTail())) {
    Mover(directionOfNextSnakeSegment())
  }
}

procedure EatTheApple() { Sacar(Rojo) }

procedure AdvanceTail() {
  directionToReturn := directionOfPreviousSnakeSegment()
  GrabAllStonesOfColor_(Negro)
  Mover(directionToReturn)
  GrabAllStonesOfColor_(Verde)
}

procedure GoFromSnakeTailToSnakeHead() {
  while (not (hasSnakeHead())) {
    Mover(directionOfPreviousSnakeSegment())
  }
}

function hasApple() { return (nroBolitas(Rojo) == 1) }

function codedDirection(color) {
  if      (nroBolitas(color) == 1) { direction := Norte } 
   elseif (nroBolitas(color) == 2) { direction := Este } 
   elseif (nroBolitas(color) == 3) { direction := Sur  } 
   else                            { direction := Oeste }
  return (direction)
}

function hasSnakeHead() { return (not(hayBolitas(Negro)) && hayBolitas(Verde)) }
function hasSnakeTail() { return (hayBolitas(Negro) && not(hayBolitas(Verde))) }

function directionOfPreviousSnakeSegment()  { return (codedDirection(Negro)) }
function directionOfNextSnakeSegment()      { return (codedDirection(Verde)) }
