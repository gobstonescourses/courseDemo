procedure MoveThePrincessTo_(dir) {
    if (not auxThereIsPrincess()) { BOOM(auxPrincessIsNotHereMsg())         }
    if (not auxHasNotEscaped())   { BOOM(auxPrincessHasAlreadyEscapedMsg()) }
    princessState := auxPrincessState()
    AuxGrabPrincess(princessState)
    AuxMove(dir)
    if (auxPrincessIsReadyForTask(princessState)) { BOOM(auxPrincessIsNotReadyForThisTaskMsg()) }
    if (auxTaskDone())                            { BOOM(auxPrincessHasPerformedThisTaskMsg())  }
    AuxDropPrincess(princessState)
}

procedure GrabTheKey() {
    if (not auxThereIsPrincess()) { BOOM(auxPrincessIsNotHereMsg())       }
    if (not auxThereIsKey())      { BOOM(auxPrincessIsNotNearTheKeyMsg()) }
    AuxGrabKey()
}

procedure OpenTheTrunkAndTakeTheHat() {
    if (not auxThereIsPrincess()) { BOOM(auxPrincessIsNotHereMsg())         }
    if (not auxThereIsTrunk())    { BOOM(auxPrincessIsNotNearTheTrunkMsg()) }
    if (not auxHasKey())          { BOOM(auxPrincessDoesNotHaveTheKeyMsg()) }
    AuxMarkTaskDone()
}

procedure GiveTheHatToTheWizard() {
    if (not auxThereIsPrincess()) { BOOM(auxPrincessIsNotHereMsg())          }
    if (not auxThereIsWizard())   { BOOM(auxPrincessIsNotNearTheWizardMsg()) }
    if (not auxHasHat())          { BOOM(auxPrincessDoesNotHaveTheHatMsg())  }
    AuxMarkTaskDone()
}

procedure AttackTheDarkKnightWithTheSword() {
    if (not auxThereIsPrincess())    { BOOM(auxPrincessIsNotHereMsg())               }
    if (not auxThereIsBlackKnight()) { BOOM(auxPrincessIsNotNearTheBlackKnightMsg()) }
    if (not auxHasSword())           { BOOM(auxPrincessDoesNotHaveTheSwordMsg())     }
    AuxMarkTaskDone()
}

procedure EscapeInTheUnicorn() {
    if (not auxThereIsPrincess()) { BOOM(auxPrincessIsNotHereMsg())                  }
    if (not auxThereIsUnicorn())  { BOOM(auxPrincessIsNotNearTheUnicornMsg())        }
    if (not auxHasPrince())       { BOOM(auxPrincessDoesNotHaveRescuedThePrincMsg()) }
    AuxMarkTaskDone()
}

procedure AuxGrabPrincess(numBlue) { repeat (numBlue) { AuxGrab(aux_Blue()) } }
procedure AuxDropPrincess(numBlue) { repeat (numBlue) { AuxDrop(aux_Blue()) } }
procedure AuxMarkTaskDone()        { AuxDrop(aux_Black()) AuxDrop(aux_Blue()) }
procedure AuxGrabKey()             { AuxGrab(aux_Green()) AuxDrop(aux_Blue()) }

function auxPrincessState()                       { return(aux_numStones(aux_Blue()))                  }
function auxPrincessIsReadyForTask(princessState) { return(aux_numStones(aux_Green()) > princessState) }
function auxTaskDone()                            { return(aux_hasStones(aux_Black()))                 }

function auxHasNotEscaped()      { AuxMoveToEdge(aux_South()) AuxMoveToEdge(aux_East()) 
                                   return(not aux_hasStones(aux_Black())) 
                                 }
function auxThereIsPrincess()    { return(aux_hasStones(aux_Blue()))       }
function auxHasKey()             { return(aux_numStones(aux_Blue())  == 2) }
function auxHasHat()             { return(aux_numStones(aux_Blue())  == 3) }
function auxHasSword()           { return(aux_numStones(aux_Blue())  == 4) }
function auxHasPrince()          { return(aux_numStones(aux_Blue())  == 5) }
function auxThereIsKey()         { return(aux_numStones(aux_Green()) == 1) }
function auxThereIsTrunk()       { return(aux_numStones(aux_Green()) == 2) }
function auxThereIsWizard()      { return(aux_numStones(aux_Green()) == 3) }
function auxThereIsBlackKnight() { return(aux_numStones(aux_Green()) == 4) }
function auxThereIsUnicorn()     { return(aux_numStones(aux_Green()) == 5) } 

function auxPrincessIsNotHereMsg()                  { return("The Princess is not in the current cell")       }
function auxPrincessHasAlreadyEscapedMsg()          { return("The Princess has already escaped")              }
function auxPrincessIsNotReadyForThisTaskMsg()      { return("The Princess is not ready for this task")       }
function auxPrincessHasPerformedThisTaskMsg()       { return("The Princess has already performed this task")  }
function auxPrincessIsNotNearTheKeyMsg()            { return("The Princess is not near the key")              }
function auxPrincessIsNotNearTheTrunkMsg()          { return("The Princess is not near the trunk")            }
function auxPrincessIsNotNearTheWizardMsg()         { return("The Princess is not near the Wizard")           }
function auxPrincessIsNotNearTheBlackKnightMsg()    { return("The Princess is not near the Black Knight")     }
function auxPrincessIsNotNearTheUnicornMsg()        { return("The Princess is not near the Unicorn")          }
function auxPrincessDoesNotHaveTheKeyMsg()          { return("The Princess does not have the key ")           }
function auxPrincessDoesNotHaveTheHatMsg()          { return("The Princess does not have the hat")            }
function auxPrincessDoesNotHaveTheSwordMsg()        { return("The Princess does not have the sword")          }
function auxPrincessDoesNotHaveRescuedThePrincMsg() { return("The Princess does not have rescued the Prince") }
